// um!!
const double DENSIDAD_INICIAL	= 0;
const double RADIO_INICIAL 		= 510e-6;		// r* 0.51 nm
const double RADIO_MIN_ENERGIA	= 800e-6;		// rm 0.80 nm
const double ALPHA				= 1e-3;			// Coeficiente de creación 1e9 m**-2 s**-1
const double V_EP				= 0.258;		// Voltaje característico [V]
const double DENSIDAD_EQ		= 1.5e-3;		// N0 Densidad de poros en equilibrio 1.5e9 m**-2
const double CONST_Q			= pow((RADIO_MIN_ENERGIA / RADIO_INICIAL), 2);
const double DIFF_POROS			= 50e-3;		// D Coeficiente de diffusión para poros 5e-14 m**2 s**-1
const double F_MAX				= 0.7e-9;		// Max fuerza electrica [N V**-2]
const double R_H				= 970e-6;		// 0.97e-9 m
const double R_T				= 310e-6;		// 0.31e-9 m
const double BETA 				= 1.4e-19;		// Repulsión estérica [J]
const double GAMA 				= 1.8e-17;		// 1.8e-11 J m**-1
const double SIGMA_P			= 2e-14;		// 2e-2 J m**-2
const double SIGMA_0			= 1e-18;		// 1e-6 J m**-2
const double TEMPERATURA 		= 310;			// 37ºC
const double TERM_TENSION_LINEA = - 2 * M_PI * GAMA;
const double BOLTZMANN			= 1.3806488e-23;// cte de Boltzmann [J K**-1]
const double TOLER_DIST_POROS	= 1e-3;
const double TOLER_ANGULO		= 1e-3;

// todo en metros!
//const double DENSIDAD_INICIAL	= 0;
//const double RADIO_INICIAL 		= 0.51e-9;		// r* 0.51 nm
//const double RADIO_MIN_ENERGIA	= 0.80e-9;		// rm 0.80 nm
//const double ALPHA				= 1e9;			// Coeficiente de creación 1e9 m**-2 s**-1
//const double V_EP				= 0.258;		// Voltaje característico [V]
//const double DENSIDAD_EQ		= 1.5e9;		// N0 Densidad de poros en equilibrio 1.5e9 m**-2
//const double CONST_Q			= pow((RADIO_MIN_ENERGIA / RADIO_INICIAL), 2);
//const double DIFF_POROS			= 50e-14;		// D Coeficiente de diffusión para poros 5e-14 m**2 s**-1
//const double F_MAX				= 0.7e-9;		// Max fuerza electrica [N V**-2]
//const double R_H				= 0.97e-9;		// 0.97e-9 m
//const double R_T				= 0.31e-9;		// 0.31e-9 m
//const double BETA 				= 1.4e-19;		// Repulsión estérica [J]
//const double GAMA 				= 1.8e-11;		// 1.8e-11 J m**-1
//const double SIGMA_P			= 2e-2;			// 2e-2 J m**-2
//const double SIGMA_0			= 1e-6;			// 1e-6 J m**-2
//const double TEMPERATURA 		= 310;			// 37ºC
//const double TERM_TENSION_LINEA = - 2 * M_PI * GAMA;
//const double BOLTZMANN			= 1.3806488e-23;// cte de Boltzmann [J K**-1]
//const double TOLER_DIST_POROS	= 1e-9;
//const double TOLER_NGULO		= 1e-3;

//	Para scaling: #include "src/IterativeSolvers/Scaling.h" en eigen/unsupported/Eigen/IterativeSolvers
//	(o acá?) y #include <unsupported/Eigen/IterativeSolvers>

	/*if (iter % PASO_CONSOLA == 0 && iter != 0) {
		int interv = (clock() - reloj) / (CLOCKS_PER_SEC / 1000);
		cout << time*1e6 << "us\t"
			<< iter << " iters\t"
			<< interv / PASO_CONSOLA << "ms/it" << endl;

		if (iter % PASO_DISCO == 0) {
			EntradaSalida::grabarTransporte(celula, time);
		}

		reloj = clock();
	}*/

	//um
	const int 	 N_COTA 			= 10;
	const int 	 MAXNPEL 			= 4;
	const int 	 NESPS				= 4;
	const int 	 NGAUSS 			= 2;
	const int 	 NDIM 				= 2;
	const int	 PASO_DISCO			= 1000;
	const int 	 PASO_CONSOLA 		= 100;
	const double EPSILON_DIST		= 1e-9;
	const double TOLER_AREA 		= 1e-6;
	const double TOLER_MASA 		= 1e-12;
	const double TOLER_DIST 		= 1e-3;
	const double EPSILON_POISSON	= 1e-3;
	const double TIERRA				= 0;
	const double FARADAY 			= 96485.34;		// C/mol
	const double R_CTE				= 8.314; 		// J/K/mol
	const double T_CTE				= 310;			// K
	const double EPSILON_TRANSPORTE	= 78.5;			// cte dieléctrica del agua
	const double EPSILON_0			= 8.85e-12;		// cte de permitividad C**2 / (N m**2)
	const double KWF				= 249.16;		// (um**3)/at/s = 1.5e11 1/mol/s
	const double KWB 				= 2.7e-5;		// 1/s
	const double CONCENT_H2O 		= 3.34e10;		// at/(um**3)
	const double RSA 				= 0.5;
	const double CONCENT_MINIMO 	= 1e-8;
	const double CLAVE 				= FARADAY / (R_CTE * T_CTE);
	const string RUTA_HISTORIAL		= "salida/historia.dat";
	const string RUTA_PH			= "salida/ph.dat";

		const double GAUSSPT[] = {
		-1 / sqrt(3.),
		 1 / sqrt(3.),
	};

	const double GAUSSWT[] = { 1, 1 };

	enum Especie {
		H_,	OH,	NA,	CL,
	};

	const double CONCENTRACION_INICIAL[] = {	// En at/(um**3)
		60.2,		// H_ 1e-7 M
		60.2,		// OH 1e-7 M
		96.32e6,	// NA 0.16 M
		96.32e6,	// CL 0.16 M
	};

	const double CONCENTRACION_ANODO[] = {		// En at/(um**3)
		1.5e7,		// H
		0,			// OH
		1e12,		// NA
		0,			// CL
	};

	const double CONCENTRACION_CATODO[] = {		// En at/(um**3)
		0,			// H
		1.806e7,	// OH
		0,			// NA
		0,			// CL
	};

	const double CARGA[] = {
		+1,			// H
		-1,			// OH
		+1,			// NA
		-1,			// CL
	};

	const double DIFUSION[] = {	//um**2 / s
		12500,		// H
		 7050,		// OH
		 1780,		// NA
		 3830,		// CL
	};
